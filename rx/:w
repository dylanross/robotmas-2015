/*
 * Receive serial messages over RF channel, parse and execute any relevant
 * commands, then deliver appropriate response over the same RF channel. 
 */


#include <VirtualWire.h>


// declare global variables and constants

// RF communications
//
int RF_BAUD = 4000;		 // baud rate for RF communications (bits per sec)
int BOARD_ID = 1;		 // identifier used for RF communications
const int RF_RX_PIN = 12;	 // pin assignments for receive (RF) and transmit (TX) signal lines
const int RF_TX_PIN = 11;

// ultrasonic ranging
int nSensors = 4;                          // placeholder for global "number of sensors" variable
int ranges[4] = {0, 0, 0, 0};              // placeholder for input array

const int trigPin = 28;                    // initialise pin assignments for ultrasonic ranging
const int echoPin0 = 31;
const int echoPin1 = 30;
const int echoPin2 = 32;
const int echoPin3 = 33;

int echoPins[4] = {echoPin0, echoPin1, echoPin2, echoPin3}; // build array to store echo pins

// servomotors
const int N_SERVOS = 3;		 // number of servos connected to USC
int SERVO_TO_SC[] = {1, 2, 3};	 // maps servo indices (0, 1, 2) to USC address (1, 2, 3, ...)

// position sensing
//int POS_TO_PIN[] = {A0, A1, A2}; // maps servo indices (0, 1, 2) to analog input pins (0, 1, 2, ...)

int MUX_ADDR_A_PIN = 22;	// multiplexer address pin A
int MUX_ADDR_B_PIN = 24;	// multiplexer address pin B
int MUX_ADDR_C_PIN = 26;	// multiplexer address pin C

int POS_TO_PIN[] = {A0, A0, A0, A0, A0, A0, A0, A0, 	// maps servo indices (0, 1, 2, ..., 17) to 
	            A1, A1, A1, A1, A1, A1, A1, A1, 	// analog input pins (A0, A1, A2) used for measuring
		    A2, A2, A2, A2, A2, A2, A2, A2};	// servo position

int POS_TO_ADDR_A[]  = {0, 1, 0, 1, 0, 1, 0, 1, 	// maps servo indices (0, 1, 2, ..., 17) to 
	                0, 1, 0, 1, 0, 1, 0, 1, 	// mux address A required to route position
			0, 1, 0, 1, 0, 1, 0, 1};	// signal to analog pin
int POS_TO_ADDR_B[]  = {0, 0, 1, 1, 0, 0, 1, 1, 	// maps servo indices (0, 1, 2, ..., 17) to
			0, 0, 1, 1, 0, 0, 1, 1, 	// mux address B required to route position
			0, 0, 1, 1, 0, 0, 1, 1};	// signal to analog pin
int POS_TO_ADDR_C[]  = {0, 0, 0, 0, 1, 1, 1, 1, 	// maps servo indices (0, 1, 2, ..., 17) to
			0, 0, 0, 0, 1, 1, 1, 1, 	// mux address C required to route position
			0, 0, 0, 0, 1, 1, 1, 1};	// signal to analog pin


void setup() {
	// set up wired serial line
  	Serial.begin(9600);

	// set up RF serial RX
	vw_set_rx_pin(RF_RX_PIN);	// set receive pin for RF serial link
	vw_set_tx_pin(RF_TX_PIN);	// set transmit pin for RF serial link
	vw_setup(RF_BAUD);  		// set RF data transfer rate (bits per sec)
	vw_rx_start();       		// start receiver PLL

	// set up sensor mux address pins as outputs
	pinMode(MUX_ADDR_A_PIN, OUTPUT);
	pinMode(MUX_ADDR_B_PIN, OUTPUT);
	pinMode(MUX_ADDR_C_PIN, OUTPUT);

	// set up any other pins
	pinMode(13, OUTPUT);		// used as an indicator for debugging purposes
}


int sense_position(int servo_ID) {	// accepts zero-indexed servo ID (0, 1, 2, ..., 17, 18) and
					// returns raw analog sample from position feedback signal
	// set MUX address to route appropriate position signal to analog input
      	digitalWrite(MUX_ADDR_A_PIN, POS_TO_ADDR_A[servo_ID]);
      	digitalWrite(MUX_ADDR_B_PIN, POS_TO_ADDR_B[servo_ID]);
      	digitalWrite(MUX_ADDR_C_PIN, POS_TO_ADDR_C[servo_ID]);

	// read position signal
	int pos = analogRead(POS_TO_PIN[servo_ID]);
	return pos;
}


int* sense_range(int* ranges) {    // accepts array of length "nSensors", and returns modified array 
				  // containing sensor values
  int sensorx = 0;

  for (sensorx = 0; sensorx < nSensors; sensorx++) { //loops over all array entries

    if (ranges[sensorx] == 0) {            //if entry is zero, takes no action (returns zero)
    }

    else {                                 //if entry is non-zero, returns range value for that sensor
      
      int duration = 0;                    //initialise variables
      int distance = 0;
      
      pinMode(trigPin, OUTPUT);            //define input and output pins
      pinMode(echoPins[sensorx], INPUT);
      
      digitalWrite(trigPin, LOW);          //leaves 10 microsecond LOW to ensure clean signal
      delayMicroseconds(10);
      digitalWrite(trigPin, HIGH);         //sends 10 microsecond pulse
      delayMicroseconds(10);
      digitalWrite(trigPin, LOW);
      
      duration = pulseIn(echoPins[sensorx], HIGH); //listens for response from echo pin
      distance = 0.5 * duration / 29;      //coverts duration to a distance in cm - integer under "duration" 
      					   //defines units - 29 gives cm
      ranges[sensorx] = distance;          //enters the distance into the array
      delay(10);                           //DEBUG attempt to remove spurious returns - seems to work
    }
  }
  return ranges;                           //returns modified array
}



void send(char *msg){
	// TODO append BOARD_ID to all outgoing messages
	digitalWrite(13, 1);			// turn indicator LED on
	vw_send((uint8_t *)msg, strlen(msg));	// send the message
	vw_wait_tx(); 				// wait for message to be sent
	digitalWrite(13, 0);			// turn indicator LED off
}


// received RF message format : "SENDER_ID,CMD_ID,CMD_BODY"
// indices :     	             0    1   2  3    4
int SENDER_ID_index = 0;	// index at which sender ID starts in received RF message
int CMD_ID_index = 2;		// index at which command ID starts in received RF message
int CMD_BODY_index = 4;		// index at which command body starts in received RF message

void parse(uint8_t buf[]) {
	int SENDER_ID = (int) buf[SENDER_ID_index];
	char CMD_ID = (char) buf[CMD_ID_index];

	if (SENDER_ID != BOARD_ID) {
		if (CMD_ID == *"S") {
			// servo command, format : "S,#1P1500T500"
			int i = CMD_BODY_index;
			while ((char) buf[i] != *"\n") {
				Serial.print((char)buf[i]);
				i++;
			}
			Serial.println(" ");
			send("1,s\n\r");
		}
		else if (CMD_ID == *"P") {
			// request position data, format : "P" or "P,{0 -- H}"
			if (buf[CMD_ID_index + 1] != *",") {
				// all position data has been requested
				// measure position of each servo
				int pos_arr[N_SERVOS];
				for (int i = 0; i < N_SERVOS; i++) {
					pos_arr[i] = sense_position(i);
				}

				// convert to char array for transmission
				// don't use hardcoded number of position
				// readings; use N_SERVOS global variable
				// instead
				char *msg = "";
				sprintf(msg, "1,p,%i,%i,%i\n\r", pos_arr[0], pos_arr[1], pos_arr[2]);

				// transmit measurements
				send(msg);
			}
			else {
				// specific position data has been requested
				// measure position of servo
				int servo_ID = (int) buf[CMD_BODY_index];
				int pos = sense_position(servo_ID);

				// convert to char array for transmission
				char *msg = "";
				sprintf(msg, "1,p,%i,%i\n\r", servo_ID, pos);

				// transmit measurement
				send(msg);
			}
		}
		else if (CMD_ID == *"U") {
			// request ultrasonic range data, format : "U" or "U,{0 -- 3}"
			// TODO remove hard-coded references to number of
			// ultrasonic range sensors
			if (buf[CMD_ID_index + 1] == *"\n") {
				// all ultrasonic ranging data has been requested
				// take us measurements
				int ranges[4] = {1, 1, 1, 1};
				sense_range(ranges);

				// convert to char array for transmission
				char *msg = "";
				sprintf(msg, "1,u,%i,%i,%i,%i\n\r", ranges[0], ranges[1], 
								    ranges[2], ranges[3]);

				// transmit measurements
				send(msg);
			}
			else {
				// specific ultrasonic sensor data has been requested
				// take us measurement
				int us_ID = int(buf[CMD_BODY_index] - '0');
				int ranges[4] = {0, 0, 0, 0};
				ranges[us_ID] = 1;
				sense_range(ranges);

				// convert to char for transmission
				char *msg = "";
				sprintf(msg, "1,u,%i\n\r", ranges[us_ID]);

				// transmit measurements
				send(msg);
			}
		}
		else if (CMD_ID == *"A") {
			// request accelerometer data, format : "A"
			send("1,a,NI\n\r");
		}
		else if (CMD_ID == *"G") {
			// request GPS data, format : "G"
			send("1,g,NI\n\r");
		}
		else {
			// received command does not match known responses!
			send("1,NR\n\r");
		}
	}
}


void loop() {
	// receive, parse, and execute commands sent over RF serial link
	uint8_t buf[VW_MAX_MESSAGE_LEN];
	uint8_t buflen = VW_MAX_MESSAGE_LEN;

	if (vw_get_message(buf, &buflen)) {
		parse(buf);
	}
}
